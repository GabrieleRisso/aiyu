# Small but handy functions. For Personal use only.
# Use it at your own risk!
# Author: Gabriele Risso  License: Apache 2.0


lang=${lang:-$(echo ${LANG:0:2})};

session=${session:-$(echo "$(wget -qO - http://frightanic.com/goodies_content/docker-names.php)-$(date '+%Y-%m-%d-%H')" )};	

audiow="/dev/shm/audiow_$session.mp3"
voicew="/dev/shm/voicew_$session.mp3"
subw="/dev/shm/subw_$session.srt"

voiceg="/dev/shm/voiceg_$session.mp3"
audiog="/dev/shm/audiog_$session.mp3"
subg="/dev/shm/subg_$session.srt"


input=""
output=""


if ! type a2s 2>/dev/null 1>&2;
then
    a2s ()
	{
        if ! command -v whisper-ctranslate2  2>/dev/null 1>&2;
		then
            echo "whisper-ctranslate2 is not installed on your system.  Install it: pip install -U whisper-ctranslate2" >&2;
            echo "o-whis is disabled" >&2;
		elif ! command -v gum --version 2>/dev/null 1>&2;
	    then
            echo " gum is not installed on your system. Install it: https://github.com/charmbracelet/gum#installation and re-try" >&2;
        else
		    if ! type a2s-whisp 2>/dev/null 1>&2;
            then
						
				echo '{{ Bold "[*] session: '$session' " }}' | gum format -t template >&2;
				
		        a2s-whisp ()
                {

                set -euo pipefail;

                echo '{{ Bold "[!] whisper subtitles started" }}' | gum format -t template >&2;

				if [ -z ${OPENAI_API_KEY+x} ]; then echo '{{ Bold "[!] OPENAI_API_KEY not set! type: export OPENAI_API_KEY=\"your-key-here\" " }}' | gum format -t template >&2; return 1; fi

                local start=$SECONDS;

                local formatsub=${formatsub:-$(echo "srt")};
                local model=${model:-$(echo "medium")};
				#if input text exis then set it as input, if not select it
				
				local input="$1";

				#select the lastly created file.mp3 (1 minute old) located in /dev/shm/ OR select a local .mp3 file
				local newest_file="";
  				local newest_file=$(find /dev/shm/ -cmin -1 -type f -name "*.mp3" -printf "%T@ %p\n" 2>/dev/null | sort -n | tail -1 | awk '{print $2}');
                if [ -n "$newest_file" ]; then 
					echo '{{ Bold "[!] most recent file --> '$newest_file'" }}' | gum format -t template >&2;
					local input=${input:-$(echo $newest_file)};
				else 
					echo '{{ Bold "[+] Select a mp3 file. Use keyboard arrows < > to traverse directories, up or down arrows to move in the directory." }}' | gum format -t template >&2;
					local input=$(gum file $PWD); 
				fi
                
				#output definition 
    			local output="$2";
                local output=${output:-$(echo $subw)};
			
			    gum style "INPUT audio located at: $input" "INput audio language: auto" "OUTPUT subtitles saved at $output" "OUTput language: auto" "SESSION: $session" --foreground 15 --border-foreground 50 --border rounded --width="$(($COLUMNS -4))" --italic --margin "1 1" --padding "0 1";

                gum spin -s points --show-output --spinner.foreground="50" --title.bold --spinner.margin="0 1" --title "using Whisper for subtitles creation... this can take a short while" --\
                whisper-ctranslate2 $input --output_format $formatsub --task transcribe --compute_type int8 --output_dir /dev/shm/ ;
                #choose best model
                echo '{{ Bold "[t] completed in '$((SECONDS-start))' seconds" }}' | gum format -t template >&2;

				#rename subtitle file to the output name
				local tmpsub=$(basename $input);
                mv "/dev/shm/${tmpsub%.*}.$formatsub" $output;

                gum confirm --negative="no" --affirmative="yes, let's read!" "open pager to read subtitles?" --timeout=15s --selected.foreground="0" --unselected.foreground="44" --selected.italic --unselected.italic --selected.background="50" --prompt.italic --prompt.margin="0 0 0 $(($COLUMNS -29))" \
                && gum pager --soft-wrap --border-foreground="86" --help.foreground="200" --show-line-numbers < $output;
                echo '{{ Bold "[+] subtitles OK" }}' | gum format -t template >&2;
				
				echo '{{ Bold "[?] What now?  press ESC to exit." }}' | gum format -t template >&2;
				echo ' ' >&2;

				CHOICE=$(gum choose --item.foreground 250 "edit function sourcecode" "edit output subtitles in glow" "play input audio" "help" "contribute to aiyu");
				[[ "$CHOICE" == "edit function sourcecode" ]] && $EDITOR $(gum filter --value="a2s" --height=9);
				[[ "$CHOICE" == "edit output subtitles in glow" ]] && cp $subw "${subw::-4}.md" && glow "/dev/shm/";
				[[ "$CHOICE" == "play input audio" ]] && ffplay -nodisp -autoexit -loglevel fatal $input;
				[[ "$CHOICE" == "help" ]] && glow -p README.md;
				[[ "$CHOICE" == "contribute to aiyu" ]] && echo "Great! I thought so, thank you for making $(gum style --bold "aiyu") is the best! leave a $(gum style --bold "star") if you like this. Go to: https://github.com/GabrieleRisso/aiyu";
				
		        }
		    else
                echo "a2s-whisp is set on the system. To use it: o-a2s \"input.mp3\" \"output.mp3\" " >&2;
            fi
        fi

		a2s-whisp "$1" "$2";

	}
else
    echo '{{ Bold "a2s is set on the system" }}' | gum format -t template >&2;
fi
