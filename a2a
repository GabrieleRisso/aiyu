# Small but handy functions. For Personal use only.
# Use it at your own risk!
# Author: Gabriele Risso  License: Apache 2.0

lang=${lang:-$(echo ${LANG:0:2})};

filter=filter.rnn && wget -qO $filter https://raw.githubusercontent.com/GregorR/rnnoise-models/master/somnolent-hogwash-2018-09-01/sh.rnnn

session=${session:-$(echo "$(wget -qO - http://frightanic.com/goodies_content/docker-names.php)-$(date '+%Y-%m-%d-%H')" )};

audiow="/dev/shm/audiow_$session.mp3"
voicew="/dev/shm/voicew_$session.mp3"

voiceg="/dev/shm/vocieg_$session.mp3"
audiog="/dev/shm/audiog_$session.mp3"
textg="/dev/shm/textg_$session.txt"

input=""
output=""

if ! type a2a 2>/dev/null 1>&2;
then
    a2a ()
	{
	if ! command -v ffmpeg --version 2>/dev/null 1>&2;
		then
            echo "ffmpeg is not installed on your system.  Install it and re-try" >&2;
            echo "a2a-ffmpeg is disabled" >&2;
		elif ! command -v gum --version 2>/dev/null 1>&2;
	    then
            echo " gum is not installed on your system. Install it: https://github.com/charmbracelet/gum#installation and re-try" >&2;
        else
		    if ! type a2a-ffmpeg 2>/dev/null 1>&2;
            then
		        a2a-ffmpeg ()
                {

                set -euo pipefail;

			    echo '{{ Bold "[!] ffmpeg started" }}' | gum format -t template >&2;

				if [ -z ${OPENAI_API_KEY+x} ]; then echo '{{ Bold "[!] OPENAI_API_KEY not set! type: export OPENAI_API_KEY=\"your-key-here\" " }}' | gum format -t template >&2; return 1; fi

                local start=$SECONDS;

				local input="$1";

				#select the lastly created file.mp3 (1 minute old) located in /dev/shm/ OR select a local .mp3 file
				local newest_file="";
  				local newest_file=$(find /dev/shm/ -cmin -1 -type f -name "*.mp3" -printf "%T@ %p\n" 2>/dev/null | sort -n | tail -1 | awk '{print $2}');
                if [ -n "$newest_file" ]; then 
					echo '{{ Bold "[>] Selecting most recent audio file --> '$newest_file'" }}' | gum format -t template >&2;
					local input=${input:-$(echo $newest_file)};
				else 
					echo '{{ Bold "[+] Select a mp3 file. Use keyboard arrows < > to traverse directories, up or down arrows to move in the directory." }}' | gum format -t template >&2;
					local input=$(gum file $PWD); 
				fi

				local output="$2";
                local output=${output:-$(echo $audiog)};

                gum style "using ffmpeg for audio tune and output creation." "INPUT: audio saved at $input" "OUTPUT: audio saved at $output" "FILTER: audiog filter at $filter" "SESSION: $session" "SPEED: 1.4" "VOLUME: 1.3" --foreground 15 --border-foreground 50 --border rounded --width="$(($COLUMNS -4))" --italic --margin "1 1" --padding "0 1";
								
            	ffmpeg -y -i $input -loglevel fatal -af "atempo=1.4,dialoguenhance,arnndn=m=$filter,volume=1.3" $output;

                echo '{{ Bold "[t] completed in '$((SECONDS-start))' seconds" }}' | gum format -t template >&2;
			    echo '{{ Bold "[+] ffmpeg OK" }}' | gum format -t template >&2;

				echo '{{ Bold "[?] What now?  press ESC to exit." }}' | gum format -t template >&2;
				echo ' ' >&2;
				CHOICE=$(gum choose --item.foreground 250 "edit function sourcecode" "play input audio" "play output audio" "help" "contribute to aiyu");
				[[ "$CHOICE" == "edit function sourcecode" ]] && $EDITOR $(gum filter --value="a2t" --height=9);
				[[ "$CHOICE" == "play input audio" ]] && ffplay -nodisp -autoexit -loglevel fatal $input;
				[[ "$CHOICE" == "play output audio" ]] && ffplay -nodisp -autoexit -loglevel fatal $output;
				[[ "$CHOICE" == "help" ]] && glow -p README.md;
				[[ "$CHOICE" == "contribute to aiyu" ]] && echo "Great! I thought so, thank you for making $(gum style --bold "aiyu") the best! leave a $(gum style --bold "star") if you like this. Go to: https://github.com/GabrieleRisso/aiyu";		
				
		        }
		    else
                echo '{{ Bold "a2a-ffmpeg is set on the system" }}' | gum format -t template >&2;
            fi
        fi		
		
		a2a-ffmpeg "$1" "$2";
	}
else
    echo '{{ Bold "a2a is set on the system" }}' | gum format -t template >&2;
fi
